//
//Copyright 2024 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: sharedprotos/databasecenter/databasecenter.proto

package databasecenter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Engine refers to underlying database binary running in an instance.
type Engine int32

const (
	// UNSPECIFIED means engine type is not known or available.
	Engine_ENGINE_UNSPECIFIED Engine = 0
	// MySQL binary running as an engine in the database instance.
	Engine_ENGINE_MYSQL Engine = 1
	// Postgres binary running as engine in database instance.
	Engine_ENGINE_POSTGRES Engine = 2
	// SQLServer binary running as engine in database instance.
	Engine_ENGINE_SQL_SERVER Engine = 3
	// Native database binary running as engine in instance.
	Engine_ENGINE_NATIVE Engine = 4
	// Oracle Exadata engine.
	Engine_ENGINE_EXADATA_ORACLE Engine = 12
	// Oracle Autonomous DB Serverless engine.
	Engine_ENGINE_ADB_SERVERLESS_ORACLE Engine = 13
	// Other refers to rest of other database engine. This is to be when engine is
	// known, but it is not present in this enum.
	Engine_ENGINE_OTHER Engine = 6
)

// Enum value maps for Engine.
var (
	Engine_name = map[int32]string{
		0:  "ENGINE_UNSPECIFIED",
		1:  "ENGINE_MYSQL",
		2:  "ENGINE_POSTGRES",
		3:  "ENGINE_SQL_SERVER",
		4:  "ENGINE_NATIVE",
		12: "ENGINE_EXADATA_ORACLE",
		13: "ENGINE_ADB_SERVERLESS_ORACLE",
		6:  "ENGINE_OTHER",
	}
	Engine_value = map[string]int32{
		"ENGINE_UNSPECIFIED":           0,
		"ENGINE_MYSQL":                 1,
		"ENGINE_POSTGRES":              2,
		"ENGINE_SQL_SERVER":            3,
		"ENGINE_NATIVE":                4,
		"ENGINE_EXADATA_ORACLE":        12,
		"ENGINE_ADB_SERVERLESS_ORACLE": 13,
		"ENGINE_OTHER":                 6,
	}
)

func (x Engine) Enum() *Engine {
	p := new(Engine)
	*p = x
	return p
}

func (x Engine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Engine) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[0].Descriptor()
}

func (Engine) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[0]
}

func (x Engine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Engine.Descriptor instead.
func (Engine) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{0}
}

// ProductType is used to identify a database service offering either in a cloud
// provider or on-premise. This enum needs to be updated whenever we introduce
// a new ProductType.
type ProductType int32

const (
	// UNSPECIFIED means product type is not known or available.
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0
	// On-premise product area
	ProductType_PRODUCT_TYPE_ON_PREM ProductType = 4
	// Other refers to rest of other product type. This is to be when product type
	// is known, but it is not present in this enum.
	ProductType_PRODUCT_TYPE_OTHER ProductType = 5
	// Compute Engine self managed databases
	ProductType_PRODUCT_TYPE_COMPUTE_ENGINE ProductType = 9
	// Oracle product area in GCP
	ProductType_PRODUCT_TYPE_ORACLE_ON_GCP ProductType = 10
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0:  "PRODUCT_TYPE_UNSPECIFIED",
		4:  "PRODUCT_TYPE_ON_PREM",
		5:  "PRODUCT_TYPE_OTHER",
		9:  "PRODUCT_TYPE_COMPUTE_ENGINE",
		10: "PRODUCT_TYPE_ORACLE_ON_GCP",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED":    0,
		"PRODUCT_TYPE_ON_PREM":        4,
		"PRODUCT_TYPE_OTHER":          5,
		"PRODUCT_TYPE_COMPUTE_ENGINE": 9,
		"PRODUCT_TYPE_ORACLE_ON_GCP":  10,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[1].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[1]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{1}
}

// InstanceType refers to type of database resource instance.
// Next ID: 11
type InstanceType int32

const (
	// Unspecified.
	//
	// Deprecated: Marked as deprecated in sharedprotos/databasecenter/databasecenter.proto.
	InstanceType_INSTANCE_TYPE_UNSPECIFIED InstanceType = 0
	// For rest of the other categories.
	InstanceType_SUB_RESOURCE_TYPE_UNSPECIFIED InstanceType = 9
	// A regular primary database instance.
	InstanceType_SUB_RESOURCE_TYPE_PRIMARY InstanceType = 5
	// A cluster or an instance acting as a secondary.
	InstanceType_SUB_RESOURCE_TYPE_SECONDARY InstanceType = 6
	// An instance acting as a read-replica.
	InstanceType_SUB_RESOURCE_TYPE_READ_REPLICA InstanceType = 7
	// An instance acting as an external primary.
	InstanceType_SUB_RESOURCE_TYPE_EXTERNAL_PRIMARY InstanceType = 10
	// For rest of the other categories.
	InstanceType_SUB_RESOURCE_TYPE_OTHER InstanceType = 8
)

// Enum value maps for InstanceType.
var (
	InstanceType_name = map[int32]string{
		0:  "INSTANCE_TYPE_UNSPECIFIED",
		9:  "SUB_RESOURCE_TYPE_UNSPECIFIED",
		5:  "SUB_RESOURCE_TYPE_PRIMARY",
		6:  "SUB_RESOURCE_TYPE_SECONDARY",
		7:  "SUB_RESOURCE_TYPE_READ_REPLICA",
		10: "SUB_RESOURCE_TYPE_EXTERNAL_PRIMARY",
		8:  "SUB_RESOURCE_TYPE_OTHER",
	}
	InstanceType_value = map[string]int32{
		"INSTANCE_TYPE_UNSPECIFIED":          0,
		"SUB_RESOURCE_TYPE_UNSPECIFIED":      9,
		"SUB_RESOURCE_TYPE_PRIMARY":          5,
		"SUB_RESOURCE_TYPE_SECONDARY":        6,
		"SUB_RESOURCE_TYPE_READ_REPLICA":     7,
		"SUB_RESOURCE_TYPE_EXTERNAL_PRIMARY": 10,
		"SUB_RESOURCE_TYPE_OTHER":            8,
	}
)

func (x InstanceType) Enum() *InstanceType {
	p := new(InstanceType)
	*p = x
	return p
}

func (x InstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[2].Descriptor()
}

func (InstanceType) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[2]
}

func (x InstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceType.Descriptor instead.
func (InstanceType) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{2}
}

// The availability type of the given database instance.
type AvailabilityType int32

const (
	AvailabilityType_AVAILABILITY_TYPE_UNSPECIFIED AvailabilityType = 0
	// Zonal available instance.
	AvailabilityType_ZONAL AvailabilityType = 1
	// Regional available instance.
	AvailabilityType_REGIONAL AvailabilityType = 2
	// Multi regional instance
	AvailabilityType_MULTI_REGIONAL AvailabilityType = 3
	// For rest of the other category
	AvailabilityType_AVAILABILITY_TYPE_OTHER AvailabilityType = 4
)

// Enum value maps for AvailabilityType.
var (
	AvailabilityType_name = map[int32]string{
		0: "AVAILABILITY_TYPE_UNSPECIFIED",
		1: "ZONAL",
		2: "REGIONAL",
		3: "MULTI_REGIONAL",
		4: "AVAILABILITY_TYPE_OTHER",
	}
	AvailabilityType_value = map[string]int32{
		"AVAILABILITY_TYPE_UNSPECIFIED": 0,
		"ZONAL":                         1,
		"REGIONAL":                      2,
		"MULTI_REGIONAL":                3,
		"AVAILABILITY_TYPE_OTHER":       4,
	}
)

func (x AvailabilityType) Enum() *AvailabilityType {
	p := new(AvailabilityType)
	*p = x
	return p
}

func (x AvailabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[3].Descriptor()
}

func (AvailabilityType) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[3]
}

func (x AvailabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityType.Descriptor instead.
func (AvailabilityType) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{3}
}

type DatabaseResourceId_Provider int32

const (
	DatabaseResourceId_PROVIDER_UNSPECIFIED DatabaseResourceId_Provider = 0
	// Google cloud platform provider
	DatabaseResourceId_GCP DatabaseResourceId_Provider = 1
	// Amazon web service
	DatabaseResourceId_AWS DatabaseResourceId_Provider = 2
	// Azure web service
	DatabaseResourceId_AZURE DatabaseResourceId_Provider = 3
	// On-prem database resources.
	DatabaseResourceId_ONPREM DatabaseResourceId_Provider = 4
	// Self-managed database provider.
	// These are resources on a cloud platform,
	// e.g., database resource installed in a GCE VM,
	// but not a managed database service.
	DatabaseResourceId_SELFMANAGED DatabaseResourceId_Provider = 5
	// For the rest of the other categories.
	// Other refers to the rest of other database service providers, this could
	// be smaller cloud provider. This needs to be provided when the provider is
	// known, but it is not present in the existing set of enum values.
	DatabaseResourceId_PROVIDER_OTHER DatabaseResourceId_Provider = 6
)

// Enum value maps for DatabaseResourceId_Provider.
var (
	DatabaseResourceId_Provider_name = map[int32]string{
		0: "PROVIDER_UNSPECIFIED",
		1: "GCP",
		2: "AWS",
		3: "AZURE",
		4: "ONPREM",
		5: "SELFMANAGED",
		6: "PROVIDER_OTHER",
	}
	DatabaseResourceId_Provider_value = map[string]int32{
		"PROVIDER_UNSPECIFIED": 0,
		"GCP":                  1,
		"AWS":                  2,
		"AZURE":                3,
		"ONPREM":               4,
		"SELFMANAGED":          5,
		"PROVIDER_OTHER":       6,
	}
)

func (x DatabaseResourceId_Provider) Enum() *DatabaseResourceId_Provider {
	p := new(DatabaseResourceId_Provider)
	*p = x
	return p
}

func (x DatabaseResourceId_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseResourceId_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[4].Descriptor()
}

func (DatabaseResourceId_Provider) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[4]
}

func (x DatabaseResourceId_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseResourceId_Provider.Descriptor instead.
func (DatabaseResourceId_Provider) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{0, 0}
}

type DatabaseResourceFeed_FeedType int32

const (
	// Unspecified feed type.
	DatabaseResourceFeed_FEEDTYPE_UNSPECIFIED DatabaseResourceFeed_FeedType = 0
	// Database resource metadata feed from control plane
	DatabaseResourceFeed_RESOURCE_METADATA DatabaseResourceFeed_FeedType = 1
	// Config based signal data feed
	DatabaseResourceFeed_CONFIG_BASED_SIGNAL_DATA DatabaseResourceFeed_FeedType = 5
)

// Enum value maps for DatabaseResourceFeed_FeedType.
var (
	DatabaseResourceFeed_FeedType_name = map[int32]string{
		0: "FEEDTYPE_UNSPECIFIED",
		1: "RESOURCE_METADATA",
		5: "CONFIG_BASED_SIGNAL_DATA",
	}
	DatabaseResourceFeed_FeedType_value = map[string]int32{
		"FEEDTYPE_UNSPECIFIED":     0,
		"RESOURCE_METADATA":        1,
		"CONFIG_BASED_SIGNAL_DATA": 5,
	}
)

func (x DatabaseResourceFeed_FeedType) Enum() *DatabaseResourceFeed_FeedType {
	p := new(DatabaseResourceFeed_FeedType)
	*p = x
	return p
}

func (x DatabaseResourceFeed_FeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseResourceFeed_FeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[5].Descriptor()
}

func (DatabaseResourceFeed_FeedType) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[5]
}

func (x DatabaseResourceFeed_FeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseResourceFeed_FeedType.Descriptor instead.
func (DatabaseResourceFeed_FeedType) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{2, 0}
}

type DatabaseResourceMetadata_State int32

const (
	DatabaseResourceMetadata_STATE_UNSPECIFIED DatabaseResourceMetadata_State = 0
	// The instance is running.
	DatabaseResourceMetadata_HEALTHY DatabaseResourceMetadata_State = 1
	// Instance being created, updated, deleted or under maintenance
	DatabaseResourceMetadata_UNHEALTHY DatabaseResourceMetadata_State = 2
	// When instance is suspended
	DatabaseResourceMetadata_SUSPENDED DatabaseResourceMetadata_State = 4
	// Instance is deleted.
	DatabaseResourceMetadata_DELETED DatabaseResourceMetadata_State = 5
	// For rest of the other category
	DatabaseResourceMetadata_STATE_OTHER DatabaseResourceMetadata_State = 3
)

// Enum value maps for DatabaseResourceMetadata_State.
var (
	DatabaseResourceMetadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "HEALTHY",
		2: "UNHEALTHY",
		4: "SUSPENDED",
		5: "DELETED",
		3: "STATE_OTHER",
	}
	DatabaseResourceMetadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"HEALTHY":           1,
		"UNHEALTHY":         2,
		"SUSPENDED":         4,
		"DELETED":           5,
		"STATE_OTHER":       3,
	}
)

func (x DatabaseResourceMetadata_State) Enum() *DatabaseResourceMetadata_State {
	p := new(DatabaseResourceMetadata_State)
	*p = x
	return p
}

func (x DatabaseResourceMetadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseResourceMetadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[6].Descriptor()
}

func (DatabaseResourceMetadata_State) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[6]
}

func (x DatabaseResourceMetadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseResourceMetadata_State.Descriptor instead.
func (DatabaseResourceMetadata_State) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{6, 0}
}

// The status of a backup run.
type BackupRun_Status int32

const (
	BackupRun_STATUS_UNSPECIFIED BackupRun_Status = 0
	// The backup was successful.
	BackupRun_SUCCESSFUL BackupRun_Status = 1
	// The backup was unsuccessful.
	BackupRun_FAILED BackupRun_Status = 2
)

// Enum value maps for BackupRun_Status.
var (
	BackupRun_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "SUCCESSFUL",
		2: "FAILED",
	}
	BackupRun_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"SUCCESSFUL":         1,
		"FAILED":             2,
	}
)

func (x BackupRun_Status) Enum() *BackupRun_Status {
	p := new(BackupRun_Status)
	*p = x
	return p
}

func (x BackupRun_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupRun_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[7].Descriptor()
}

func (BackupRun_Status) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[7]
}

func (x BackupRun_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupRun_Status.Descriptor instead.
func (BackupRun_Status) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{11, 0}
}

// Signal type
type ConfigBasedSignalData_SignalType int32

const (
	// Unspecified signal type.
	ConfigBasedSignalData_SIGNAL_TYPE_UNSPECIFIED ConfigBasedSignalData_SignalType = 0
	// Outdated Minor Version
	ConfigBasedSignalData_SIGNAL_TYPE_OUTDATED_MINOR_VERSION ConfigBasedSignalData_SignalType = 1
	// Represents database auditing is disabled.
	ConfigBasedSignalData_SIGNAL_TYPE_DATABASE_AUDITING_DISABLED ConfigBasedSignalData_SignalType = 2
	// Represents if a database has a password configured for the
	// root account or not.
	ConfigBasedSignalData_SIGNAL_TYPE_NO_ROOT_PASSWORD ConfigBasedSignalData_SignalType = 3
	// Represents if a resource is exposed to public access.
	ConfigBasedSignalData_SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS ConfigBasedSignalData_SignalType = 4
	// Represents if a resources requires all incoming connections to use SSL
	// or not.
	ConfigBasedSignalData_SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS ConfigBasedSignalData_SignalType = 5
)

// Enum value maps for ConfigBasedSignalData_SignalType.
var (
	ConfigBasedSignalData_SignalType_name = map[int32]string{
		0: "SIGNAL_TYPE_UNSPECIFIED",
		1: "SIGNAL_TYPE_OUTDATED_MINOR_VERSION",
		2: "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED",
		3: "SIGNAL_TYPE_NO_ROOT_PASSWORD",
		4: "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS",
		5: "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS",
	}
	ConfigBasedSignalData_SignalType_value = map[string]int32{
		"SIGNAL_TYPE_UNSPECIFIED":                0,
		"SIGNAL_TYPE_OUTDATED_MINOR_VERSION":     1,
		"SIGNAL_TYPE_DATABASE_AUDITING_DISABLED": 2,
		"SIGNAL_TYPE_NO_ROOT_PASSWORD":           3,
		"SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS":   4,
		"SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS":    5,
	}
)

func (x ConfigBasedSignalData_SignalType) Enum() *ConfigBasedSignalData_SignalType {
	p := new(ConfigBasedSignalData_SignalType)
	*p = x
	return p
}

func (x ConfigBasedSignalData_SignalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigBasedSignalData_SignalType) Descriptor() protoreflect.EnumDescriptor {
	return file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[8].Descriptor()
}

func (ConfigBasedSignalData_SignalType) Type() protoreflect.EnumType {
	return &file_sharedprotos_databasecenter_databasecenter_proto_enumTypes[8]
}

func (x ConfigBasedSignalData_SignalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigBasedSignalData_SignalType.Descriptor instead.
func (ConfigBasedSignalData_SignalType) EnumDescriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{12, 0}
}

// DatabaseResourceId will serve as primary key for any resource ingestion
// event.
type DatabaseResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
	Provider DatabaseResourceId_Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId_Provider" json:"provider,omitempty"`
	// Needs to be used only when the provider is PROVIDER_OTHER.
	ProviderDescription string `protobuf:"bytes,3,opt,name=provider_description,json=providerDescription,proto3" json:"provider_description,omitempty"`
	// A service-local token that distinguishes this resource from other resources
	// within the same service.
	UniqueId string `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// The type of resource this ID is identifying. Ex
	// compute.googleapis.com/Instance
	// REQUIRED Please refer go/condor-common-datamodel
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *DatabaseResourceId) Reset() {
	*x = DatabaseResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseResourceId) ProtoMessage() {}

func (x *DatabaseResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseResourceId.ProtoReflect.Descriptor instead.
func (*DatabaseResourceId) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseResourceId) GetProvider() DatabaseResourceId_Provider {
	if x != nil {
		return x.Provider
	}
	return DatabaseResourceId_PROVIDER_UNSPECIFIED
}

func (x *DatabaseResourceId) GetProviderDescription() string {
	if x != nil {
		return x.ProviderDescription
	}
	return ""
}

func (x *DatabaseResourceId) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *DatabaseResourceId) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// MachineConfiguration describes the configuration of a machine specific to
// Database Resource.
type MachineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory size in bytes.
	MemorySizeInBytes int64 `protobuf:"varint,2,opt,name=memory_size_in_bytes,json=memorySizeInBytes,proto3" json:"memory_size_in_bytes,omitempty"`
	// Number of shards (if applicable).
	ShardCount int32 `protobuf:"varint,3,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// The number of vCPUs.
	VcpuCount float64 `protobuf:"fixed64,4,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
}

func (x *MachineConfiguration) Reset() {
	*x = MachineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfiguration) ProtoMessage() {}

func (x *MachineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfiguration.ProtoReflect.Descriptor instead.
func (*MachineConfiguration) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{1}
}

func (x *MachineConfiguration) GetMemorySizeInBytes() int64 {
	if x != nil {
		return x.MemorySizeInBytes
	}
	return 0
}

func (x *MachineConfiguration) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *MachineConfiguration) GetVcpuCount() float64 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

type DatabaseResourceFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when feed is generated.
	FeedTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=feed_timestamp,json=feedTimestamp,proto3" json:"feed_timestamp,omitempty"`
	// Type feed to be ingested into condor
	FeedType DatabaseResourceFeed_FeedType `protobuf:"varint,3,opt,name=feed_type,json=feedType,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed_FeedType" json:"feed_type,omitempty"`
	// Types that are assignable to Content:
	//
	//	*DatabaseResourceFeed_ResourceMetadata
	//	*DatabaseResourceFeed_ConfigBasedSignalData
	Content isDatabaseResourceFeed_Content `protobuf_oneof:"Content"`
}

func (x *DatabaseResourceFeed) Reset() {
	*x = DatabaseResourceFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseResourceFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseResourceFeed) ProtoMessage() {}

func (x *DatabaseResourceFeed) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseResourceFeed.ProtoReflect.Descriptor instead.
func (*DatabaseResourceFeed) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseResourceFeed) GetFeedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FeedTimestamp
	}
	return nil
}

func (x *DatabaseResourceFeed) GetFeedType() DatabaseResourceFeed_FeedType {
	if x != nil {
		return x.FeedType
	}
	return DatabaseResourceFeed_FEEDTYPE_UNSPECIFIED
}

func (m *DatabaseResourceFeed) GetContent() isDatabaseResourceFeed_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *DatabaseResourceFeed) GetResourceMetadata() *DatabaseResourceMetadata {
	if x, ok := x.GetContent().(*DatabaseResourceFeed_ResourceMetadata); ok {
		return x.ResourceMetadata
	}
	return nil
}

func (x *DatabaseResourceFeed) GetConfigBasedSignalData() *ConfigBasedSignalData {
	if x, ok := x.GetContent().(*DatabaseResourceFeed_ConfigBasedSignalData); ok {
		return x.ConfigBasedSignalData
	}
	return nil
}

type isDatabaseResourceFeed_Content interface {
	isDatabaseResourceFeed_Content()
}

type DatabaseResourceFeed_ResourceMetadata struct {
	ResourceMetadata *DatabaseResourceMetadata `protobuf:"bytes,4,opt,name=resource_metadata,json=resourceMetadata,proto3,oneof"`
}

type DatabaseResourceFeed_ConfigBasedSignalData struct {
	// Config based signal data is used to ingest signals that are generated
	// based on the configuration of the database resource.
	ConfigBasedSignalData *ConfigBasedSignalData `protobuf:"bytes,8,opt,name=config_based_signal_data,json=configBasedSignalData,proto3,oneof"`
}

func (*DatabaseResourceFeed_ResourceMetadata) isDatabaseResourceFeed_Content() {}

func (*DatabaseResourceFeed_ConfigBasedSignalData) isDatabaseResourceFeed_Content() {}

// Message type for storing user labels. User labels are used to tag App
// Engine resources, allowing users to search for resources matching a set of
// labels and to aggregate usage data by labels.
type UserLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserLabels) Reset() {
	*x = UserLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLabels) ProtoMessage() {}

func (x *UserLabels) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLabels.ProtoReflect.Descriptor instead.
func (*UserLabels) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{3}
}

func (x *UserLabels) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Message type for storing tags. Tags provide a way to create annotations for
// resources, and in some cases conditionally allow or deny policies based on
// whether a resource has a specific tag.
type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tag key/value mappings.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{4}
}

func (x *Tags) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Product specification for Condor resources.
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of specific database product. It could be CloudSQL, AlloyDB etc..
	Type ProductType `protobuf:"varint,1,opt,name=type,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.ProductType" json:"type,omitempty"`
	// The specific engine that the underlying database is running.
	Engine Engine `protobuf:"varint,2,opt,name=engine,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.Engine" json:"engine,omitempty"`
	// Version of the underlying database engine. Example values: For MySQL, it
	// could be "8.0", "5.7" etc.. For Postgres, it could be "14", "15" etc..
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{5}
}

func (x *Product) GetType() ProductType {
	if x != nil {
		return x.Type
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *Product) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *Product) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Common model for database resource instance metadata.
// Next ID: 25
type DatabaseResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for a Database resource
	Id *DatabaseResourceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Different from DatabaseResourceId.unique_id, a resource name can be reused
	// over time. That is, after a resource named "ABC" is deleted, the name "ABC"
	// can be used to to create a new resource within the same source. Resource
	// name to follow CAIS resource_name format as noted here
	// go/condor-common-datamodel
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Identifier for this resource's immediate parent/primary resource if the
	// current resource is a replica or derived form of another Database resource.
	// Else it would be NULL.
	// REQUIRED if the immediate parent exists when first time resource is getting
	// ingested, otherwise optional.
	PrimaryResourceId *DatabaseResourceId `protobuf:"bytes,3,opt,name=primary_resource_id,json=primaryResourceId,proto3" json:"primary_resource_id,omitempty"`
	// Primary resource location.
	// REQUIRED if the immediate parent exists when first time resource is getting
	// ingested, otherwise optional.
	PrimaryResourceLocation string `protobuf:"bytes,21,opt,name=primary_resource_location,json=primaryResourceLocation,proto3" json:"primary_resource_location,omitempty"`
	// Closest parent Cloud Resource Manager container of
	// this resource. It must be resource name of a Cloud Resource Manager
	// project with the format of "<type>/<number>", such as
	// "projects/123".
	// For GCP provided resources, number should be project number.
	ResourceContainer string `protobuf:"bytes,4,opt,name=resource_container,json=resourceContainer,proto3" json:"resource_container,omitempty"`
	// The resource location.
	// REQUIRED
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// The creation time of the resource, i.e. the time when resource is created
	// and recorded in partner service.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// The time at which the resource was updated and recorded at partner service.
	UpdationTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updation_time,json=updationTime,proto3" json:"updation_time,omitempty"`
	// The state that the instance is expected to be in. For example, an instance
	// state can transition to UNHEALTHY due to wrong patch update, while the
	// expected state will remain at the HEALTHY.
	ExpectedState DatabaseResourceMetadata_State `protobuf:"varint,8,opt,name=expected_state,json=expectedState,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata_State" json:"expected_state,omitempty"`
	// Current state of the instance.
	CurrentState DatabaseResourceMetadata_State `protobuf:"varint,9,opt,name=current_state,json=currentState,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata_State" json:"current_state,omitempty"`
	// The type of the instance. Specified at creation time.
	InstanceType InstanceType `protobuf:"varint,10,opt,name=instance_type,json=instanceType,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.InstanceType" json:"instance_type,omitempty"`
	// The product this resource represents.
	Product *Product `protobuf:"bytes,11,opt,name=product,proto3" json:"product,omitempty"`
	// Availability configuration for this instance
	AvailabilityConfiguration *AvailabilityConfiguration `protobuf:"bytes,13,opt,name=availability_configuration,json=availabilityConfiguration,proto3" json:"availability_configuration,omitempty"`
	// Backup configuration for this instance
	BackupConfiguration *BackupConfiguration `protobuf:"bytes,14,opt,name=backup_configuration,json=backupConfiguration,proto3" json:"backup_configuration,omitempty"`
	// Latest backup run information for this instance
	BackupRun *BackupRun `protobuf:"bytes,15,opt,name=backup_run,json=backupRun,proto3" json:"backup_run,omitempty"`
	// User-provided labels associated with the resource
	UserLabelSet *UserLabels `protobuf:"bytes,18,opt,name=user_label_set,json=userLabelSet,proto3" json:"user_label_set,omitempty"`
	// Machine configuration for this resource.
	MachineConfiguration *MachineConfiguration `protobuf:"bytes,19,opt,name=machine_configuration,json=machineConfiguration,proto3" json:"machine_configuration,omitempty"`
	// Tags associated with this resources.
	TagsSet *Tags `protobuf:"bytes,20,opt,name=tags_set,json=tagsSet,proto3" json:"tags_set,omitempty"`
}

func (x *DatabaseResourceMetadata) Reset() {
	*x = DatabaseResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseResourceMetadata) ProtoMessage() {}

func (x *DatabaseResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseResourceMetadata.ProtoReflect.Descriptor instead.
func (*DatabaseResourceMetadata) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{6}
}

func (x *DatabaseResourceMetadata) GetId() *DatabaseResourceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DatabaseResourceMetadata) GetPrimaryResourceId() *DatabaseResourceId {
	if x != nil {
		return x.PrimaryResourceId
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetPrimaryResourceLocation() string {
	if x != nil {
		return x.PrimaryResourceLocation
	}
	return ""
}

func (x *DatabaseResourceMetadata) GetResourceContainer() string {
	if x != nil {
		return x.ResourceContainer
	}
	return ""
}

func (x *DatabaseResourceMetadata) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DatabaseResourceMetadata) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetUpdationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdationTime
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetExpectedState() DatabaseResourceMetadata_State {
	if x != nil {
		return x.ExpectedState
	}
	return DatabaseResourceMetadata_STATE_UNSPECIFIED
}

func (x *DatabaseResourceMetadata) GetCurrentState() DatabaseResourceMetadata_State {
	if x != nil {
		return x.CurrentState
	}
	return DatabaseResourceMetadata_STATE_UNSPECIFIED
}

func (x *DatabaseResourceMetadata) GetInstanceType() InstanceType {
	if x != nil {
		return x.InstanceType
	}
	return InstanceType_INSTANCE_TYPE_UNSPECIFIED
}

func (x *DatabaseResourceMetadata) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetAvailabilityConfiguration() *AvailabilityConfiguration {
	if x != nil {
		return x.AvailabilityConfiguration
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetBackupConfiguration() *BackupConfiguration {
	if x != nil {
		return x.BackupConfiguration
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetBackupRun() *BackupRun {
	if x != nil {
		return x.BackupRun
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetUserLabelSet() *UserLabels {
	if x != nil {
		return x.UserLabelSet
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetMachineConfiguration() *MachineConfiguration {
	if x != nil {
		return x.MachineConfiguration
	}
	return nil
}

func (x *DatabaseResourceMetadata) GetTagsSet() *Tags {
	if x != nil {
		return x.TagsSet
	}
	return nil
}

// Configuration for availability of database instance
type AvailabilityConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Availability type. Potential values:
	// *  `ZONAL`: The instance serves data from only one zone. Outages in that
	// zone affect data accessibility.
	// *  `REGIONAL`: The instance can serve data from more than one zone in a
	// region (it is highly available).
	AvailabilityType            AvailabilityType `protobuf:"varint,1,opt,name=availability_type,json=availabilityType,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.AvailabilityType" json:"availability_type,omitempty"`
	ExternalReplicaConfigured   bool             `protobuf:"varint,2,opt,name=external_replica_configured,json=externalReplicaConfigured,proto3" json:"external_replica_configured,omitempty"`
	PromotableReplicaConfigured bool             `protobuf:"varint,3,opt,name=promotable_replica_configured,json=promotableReplicaConfigured,proto3" json:"promotable_replica_configured,omitempty"`
	// Checks for resources that are configured to have redundancy, and ongoing
	// replication across regions
	CrossRegionReplicaConfigured bool `protobuf:"varint,4,opt,name=cross_region_replica_configured,json=crossRegionReplicaConfigured,proto3" json:"cross_region_replica_configured,omitempty"`
	// Checks for existence of (multi-cluster) routing configuration that allows
	// automatic failover to a different zone/region in case of an outage.
	// Applicable to Bigtable resources.
	AutomaticFailoverRoutingConfigured bool `protobuf:"varint,5,opt,name=automatic_failover_routing_configured,json=automaticFailoverRoutingConfigured,proto3" json:"automatic_failover_routing_configured,omitempty"`
}

func (x *AvailabilityConfiguration) Reset() {
	*x = AvailabilityConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityConfiguration) ProtoMessage() {}

func (x *AvailabilityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityConfiguration.ProtoReflect.Descriptor instead.
func (*AvailabilityConfiguration) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{7}
}

func (x *AvailabilityConfiguration) GetAvailabilityType() AvailabilityType {
	if x != nil {
		return x.AvailabilityType
	}
	return AvailabilityType_AVAILABILITY_TYPE_UNSPECIFIED
}

func (x *AvailabilityConfiguration) GetExternalReplicaConfigured() bool {
	if x != nil {
		return x.ExternalReplicaConfigured
	}
	return false
}

func (x *AvailabilityConfiguration) GetPromotableReplicaConfigured() bool {
	if x != nil {
		return x.PromotableReplicaConfigured
	}
	return false
}

func (x *AvailabilityConfiguration) GetCrossRegionReplicaConfigured() bool {
	if x != nil {
		return x.CrossRegionReplicaConfigured
	}
	return false
}

func (x *AvailabilityConfiguration) GetAutomaticFailoverRoutingConfigured() bool {
	if x != nil {
		return x.AutomaticFailoverRoutingConfigured
	}
	return false
}

// Configuration for automatic backups
type BackupConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether customer visible automated backups are enabled on the instance.
	AutomatedBackupEnabled bool `protobuf:"varint,1,opt,name=automated_backup_enabled,json=automatedBackupEnabled,proto3" json:"automated_backup_enabled,omitempty"`
	// Backup retention settings.
	BackupRetentionSettings *RetentionSettings `protobuf:"bytes,2,opt,name=backup_retention_settings,json=backupRetentionSettings,proto3" json:"backup_retention_settings,omitempty"`
	// Whether point-in-time recovery is enabled. This is optional field, if the
	// database service does not have this feature or metadata is not available in
	// control plane, this can be omitted.
	PointInTimeRecoveryEnabled bool `protobuf:"varint,3,opt,name=point_in_time_recovery_enabled,json=pointInTimeRecoveryEnabled,proto3" json:"point_in_time_recovery_enabled,omitempty"`
}

func (x *BackupConfiguration) Reset() {
	*x = BackupConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupConfiguration) ProtoMessage() {}

func (x *BackupConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupConfiguration.ProtoReflect.Descriptor instead.
func (*BackupConfiguration) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{8}
}

func (x *BackupConfiguration) GetAutomatedBackupEnabled() bool {
	if x != nil {
		return x.AutomatedBackupEnabled
	}
	return false
}

func (x *BackupConfiguration) GetBackupRetentionSettings() *RetentionSettings {
	if x != nil {
		return x.BackupRetentionSettings
	}
	return nil
}

func (x *BackupConfiguration) GetPointInTimeRecoveryEnabled() bool {
	if x != nil {
		return x.PointInTimeRecoveryEnabled
	}
	return false
}

// GCBDR Configuration for the resource.
// (-- api-linter: core::0140::abbreviations=disabled
//
//	aip.dev/not-precedent: This is required for consistency with the existing
//	configuration fields defined in the proto. --)
type GCBDRConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the resource is managed by GCBDR.
	GcbdrManaged bool `protobuf:"varint,1,opt,name=gcbdr_managed,json=gcbdrManaged,proto3" json:"gcbdr_managed,omitempty"`
}

func (x *GCBDRConfiguration) Reset() {
	*x = GCBDRConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCBDRConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCBDRConfiguration) ProtoMessage() {}

func (x *GCBDRConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCBDRConfiguration.ProtoReflect.Descriptor instead.
func (*GCBDRConfiguration) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{9}
}

func (x *GCBDRConfiguration) GetGcbdrManaged() bool {
	if x != nil {
		return x.GcbdrManaged
	}
	return false
}

type RetentionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Depending on the value of retention_unit, this is used to determine
	// if a backup needs to be deleted.  If retention_unit is 'COUNT', we will
	// retain this many backups.
	//
	// Types that are assignable to Retention:
	//
	//	*RetentionSettings_QuantityBasedRetention
	//	*RetentionSettings_DurationBasedRetention
	//	*RetentionSettings_TimestampBasedRetentionTime
	Retention isRetentionSettings_Retention `protobuf_oneof:"retention"`
}

func (x *RetentionSettings) Reset() {
	*x = RetentionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetentionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetentionSettings) ProtoMessage() {}

func (x *RetentionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetentionSettings.ProtoReflect.Descriptor instead.
func (*RetentionSettings) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{10}
}

func (m *RetentionSettings) GetRetention() isRetentionSettings_Retention {
	if m != nil {
		return m.Retention
	}
	return nil
}

func (x *RetentionSettings) GetQuantityBasedRetention() *wrapperspb.Int32Value {
	if x, ok := x.GetRetention().(*RetentionSettings_QuantityBasedRetention); ok {
		return x.QuantityBasedRetention
	}
	return nil
}

func (x *RetentionSettings) GetDurationBasedRetention() *durationpb.Duration {
	if x, ok := x.GetRetention().(*RetentionSettings_DurationBasedRetention); ok {
		return x.DurationBasedRetention
	}
	return nil
}

func (x *RetentionSettings) GetTimestampBasedRetentionTime() *timestamppb.Timestamp {
	if x, ok := x.GetRetention().(*RetentionSettings_TimestampBasedRetentionTime); ok {
		return x.TimestampBasedRetentionTime
	}
	return nil
}

type isRetentionSettings_Retention interface {
	isRetentionSettings_Retention()
}

type RetentionSettings_QuantityBasedRetention struct {
	QuantityBasedRetention *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=quantity_based_retention,json=quantityBasedRetention,proto3,oneof"`
}

type RetentionSettings_DurationBasedRetention struct {
	// Duration based retention period i.e. 172800 seconds (2 days)
	DurationBasedRetention *durationpb.Duration `protobuf:"bytes,4,opt,name=duration_based_retention,json=durationBasedRetention,proto3,oneof"`
}

type RetentionSettings_TimestampBasedRetentionTime struct {
	// Timestamp based retention period i.e. 2024-05-01T00:00:00Z
	TimestampBasedRetentionTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp_based_retention_time,json=timestampBasedRetentionTime,proto3,oneof"`
}

func (*RetentionSettings_QuantityBasedRetention) isRetentionSettings_Retention() {}

func (*RetentionSettings_DurationBasedRetention) isRetentionSettings_Retention() {}

func (*RetentionSettings_TimestampBasedRetentionTime) isRetentionSettings_Retention() {}

// A backup run.
type BackupRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time the backup operation started.
	// REQUIRED
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the backup operation completed.
	// REQUIRED
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The status of this run.
	// REQUIRED
	Status BackupRun_Status `protobuf:"varint,2,opt,name=status,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.BackupRun_Status" json:"status,omitempty"`
}

func (x *BackupRun) Reset() {
	*x = BackupRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRun) ProtoMessage() {}

func (x *BackupRun) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRun.ProtoReflect.Descriptor instead.
func (*BackupRun) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{11}
}

func (x *BackupRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BackupRun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *BackupRun) GetStatus() BackupRun_Status {
	if x != nil {
		return x.Status
	}
	return BackupRun_STATUS_UNSPECIFIED
}

// Config based signal data. This is used to send signals to Condor which are
// based on the DB level configurations. These will be used to send signals for
// self managed databases.
type ConfigBasedSignalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database resource id.
	ResourceId *DatabaseResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Full Resource name of the source resource.
	FullResourceName string `protobuf:"bytes,2,opt,name=full_resource_name,json=fullResourceName,proto3" json:"full_resource_name,omitempty"`
	// Last time signal was refreshed
	LastRefreshTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	// Signal type of the signal
	SignalType ConfigBasedSignalData_SignalType `protobuf:"varint,4,opt,name=signal_type,json=signalType,proto3,enum=workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData_SignalType" json:"signal_type,omitempty"`
	// Types that are assignable to SignalMetadata:
	//
	//	*ConfigBasedSignalData_SignalBoolValue
	//	*ConfigBasedSignalData_OutdatedMinorVersionSignalData
	SignalMetadata isConfigBasedSignalData_SignalMetadata `protobuf_oneof:"signal_metadata"`
}

func (x *ConfigBasedSignalData) Reset() {
	*x = ConfigBasedSignalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigBasedSignalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigBasedSignalData) ProtoMessage() {}

func (x *ConfigBasedSignalData) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigBasedSignalData.ProtoReflect.Descriptor instead.
func (*ConfigBasedSignalData) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigBasedSignalData) GetResourceId() *DatabaseResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *ConfigBasedSignalData) GetFullResourceName() string {
	if x != nil {
		return x.FullResourceName
	}
	return ""
}

func (x *ConfigBasedSignalData) GetLastRefreshTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRefreshTime
	}
	return nil
}

func (x *ConfigBasedSignalData) GetSignalType() ConfigBasedSignalData_SignalType {
	if x != nil {
		return x.SignalType
	}
	return ConfigBasedSignalData_SIGNAL_TYPE_UNSPECIFIED
}

func (m *ConfigBasedSignalData) GetSignalMetadata() isConfigBasedSignalData_SignalMetadata {
	if m != nil {
		return m.SignalMetadata
	}
	return nil
}

func (x *ConfigBasedSignalData) GetSignalBoolValue() bool {
	if x, ok := x.GetSignalMetadata().(*ConfigBasedSignalData_SignalBoolValue); ok {
		return x.SignalBoolValue
	}
	return false
}

func (x *ConfigBasedSignalData) GetOutdatedMinorVersionSignalData() *OutdatedMinorVersionSignalData {
	if x, ok := x.GetSignalMetadata().(*ConfigBasedSignalData_OutdatedMinorVersionSignalData); ok {
		return x.OutdatedMinorVersionSignalData
	}
	return nil
}

type isConfigBasedSignalData_SignalMetadata interface {
	isConfigBasedSignalData_SignalMetadata()
}

type ConfigBasedSignalData_SignalBoolValue struct {
	// Signal data for boolean signals.
	SignalBoolValue bool `protobuf:"varint,5,opt,name=signal_bool_value,json=signalBoolValue,proto3,oneof"`
}

type ConfigBasedSignalData_OutdatedMinorVersionSignalData struct {
	// Outdated minor version signal data.
	OutdatedMinorVersionSignalData *OutdatedMinorVersionSignalData `protobuf:"bytes,6,opt,name=outdated_minor_version_signal_data,json=outdatedMinorVersionSignalData,proto3,oneof"`
}

func (*ConfigBasedSignalData_SignalBoolValue) isConfigBasedSignalData_SignalMetadata() {}

func (*ConfigBasedSignalData_OutdatedMinorVersionSignalData) isConfigBasedSignalData_SignalMetadata() {
}

// Outdated minor version signal data. This is used to send signals to Condor
// which are based on the DB level configurations. These will be used to send
// signals for self managed databases.
type OutdatedMinorVersionSignalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current version of the database.
	CurrentVersion string `protobuf:"bytes,1,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
}

func (x *OutdatedMinorVersionSignalData) Reset() {
	*x = OutdatedMinorVersionSignalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutdatedMinorVersionSignalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutdatedMinorVersionSignalData) ProtoMessage() {}

func (x *OutdatedMinorVersionSignalData) ProtoReflect() protoreflect.Message {
	mi := &file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutdatedMinorVersionSignalData.ProtoReflect.Descriptor instead.
func (*OutdatedMinorVersionSignalData) Descriptor() ([]byte, []int) {
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP(), []int{13}
}

func (x *OutdatedMinorVersionSignalData) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

var File_sharedprotos_databasecenter_databasecenter_proto protoreflect.FileDescriptor

var file_sharedprotos_databasecenter_databasecenter_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x31, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x02, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x72,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x57, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x50, 0x52, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x45, 0x4c, 0x46, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x06, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x76, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0xda, 0x04, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x66, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6d,
	0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x50, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x65, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x6b, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x45, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x05, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02,
	0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0xaa, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x61,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xee, 0x0d, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x55, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x75, 0x6e, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x12,
	0x63, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x12, 0x7c, 0x0a, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x73, 0x53, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x4a,
	0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10,
	0x12, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08,
	0x18, 0x10, 0x19, 0x22, 0xab, 0x03, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x70, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x51,
	0x0a, 0x25, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x22, 0x96, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x17, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x12, 0x47, 0x43,
	0x42, 0x44, 0x52, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x63, 0x62, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x63, 0x62, 0x64, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x18, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x1e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x9e, 0x02, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x75, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x75, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x46, 0x55, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xc3, 0x06, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x66, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x74, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x22, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x42, 0x11, 0x0a, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49,
	0x0a, 0x1e, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0xe4, 0x01, 0x0a, 0x06, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45,
	0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x51,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x41, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x22, 0x04, 0x08, 0x05,
	0x10, 0x05, 0x22, 0x04, 0x08, 0x07, 0x10, 0x07, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x22, 0x04,
	0x08, 0x09, 0x10, 0x09, 0x22, 0x04, 0x08, 0x0a, 0x10, 0x0a, 0x22, 0x04, 0x08, 0x0b, 0x10, 0x0b,
	0x2a, 0xc2, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x47, 0x43, 0x50, 0x10,
	0x0a, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08,
	0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0x04, 0x08, 0x07, 0x10, 0x07, 0x22,
	0x04, 0x08, 0x08, 0x10, 0x08, 0x2a, 0x95, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x55, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x07,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x08, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04, 0x08, 0x02, 0x10,
	0x02, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x2a, 0x7f, 0x0a,
	0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x42, 0x52,
	0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sharedprotos_databasecenter_databasecenter_proto_rawDescOnce sync.Once
	file_sharedprotos_databasecenter_databasecenter_proto_rawDescData = file_sharedprotos_databasecenter_databasecenter_proto_rawDesc
)

func file_sharedprotos_databasecenter_databasecenter_proto_rawDescGZIP() []byte {
	file_sharedprotos_databasecenter_databasecenter_proto_rawDescOnce.Do(func() {
		file_sharedprotos_databasecenter_databasecenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_sharedprotos_databasecenter_databasecenter_proto_rawDescData)
	})
	return file_sharedprotos_databasecenter_databasecenter_proto_rawDescData
}

var file_sharedprotos_databasecenter_databasecenter_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_sharedprotos_databasecenter_databasecenter_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_sharedprotos_databasecenter_databasecenter_proto_goTypes = []interface{}{
	(Engine)(0),                            // 0: workloadagentplatform.sharedprotos.databasecenter.Engine
	(ProductType)(0),                       // 1: workloadagentplatform.sharedprotos.databasecenter.ProductType
	(InstanceType)(0),                      // 2: workloadagentplatform.sharedprotos.databasecenter.InstanceType
	(AvailabilityType)(0),                  // 3: workloadagentplatform.sharedprotos.databasecenter.AvailabilityType
	(DatabaseResourceId_Provider)(0),       // 4: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId.Provider
	(DatabaseResourceFeed_FeedType)(0),     // 5: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed.FeedType
	(DatabaseResourceMetadata_State)(0),    // 6: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.State
	(BackupRun_Status)(0),                  // 7: workloadagentplatform.sharedprotos.databasecenter.BackupRun.Status
	(ConfigBasedSignalData_SignalType)(0),  // 8: workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData.SignalType
	(*DatabaseResourceId)(nil),             // 9: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId
	(*MachineConfiguration)(nil),           // 10: workloadagentplatform.sharedprotos.databasecenter.MachineConfiguration
	(*DatabaseResourceFeed)(nil),           // 11: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed
	(*UserLabels)(nil),                     // 12: workloadagentplatform.sharedprotos.databasecenter.UserLabels
	(*Tags)(nil),                           // 13: workloadagentplatform.sharedprotos.databasecenter.Tags
	(*Product)(nil),                        // 14: workloadagentplatform.sharedprotos.databasecenter.Product
	(*DatabaseResourceMetadata)(nil),       // 15: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata
	(*AvailabilityConfiguration)(nil),      // 16: workloadagentplatform.sharedprotos.databasecenter.AvailabilityConfiguration
	(*BackupConfiguration)(nil),            // 17: workloadagentplatform.sharedprotos.databasecenter.BackupConfiguration
	(*GCBDRConfiguration)(nil),             // 18: workloadagentplatform.sharedprotos.databasecenter.GCBDRConfiguration
	(*RetentionSettings)(nil),              // 19: workloadagentplatform.sharedprotos.databasecenter.RetentionSettings
	(*BackupRun)(nil),                      // 20: workloadagentplatform.sharedprotos.databasecenter.BackupRun
	(*ConfigBasedSignalData)(nil),          // 21: workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData
	(*OutdatedMinorVersionSignalData)(nil), // 22: workloadagentplatform.sharedprotos.databasecenter.OutdatedMinorVersionSignalData
	nil,                                    // 23: workloadagentplatform.sharedprotos.databasecenter.UserLabels.LabelsEntry
	nil,                                    // 24: workloadagentplatform.sharedprotos.databasecenter.Tags.TagsEntry
	(*timestamppb.Timestamp)(nil),          // 25: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),          // 26: google.protobuf.Int32Value
	(*durationpb.Duration)(nil),            // 27: google.protobuf.Duration
}
var file_sharedprotos_databasecenter_databasecenter_proto_depIdxs = []int32{
	4,  // 0: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId.provider:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId.Provider
	25, // 1: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed.feed_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 2: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed.feed_type:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed.FeedType
	15, // 3: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed.resource_metadata:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata
	21, // 4: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceFeed.config_based_signal_data:type_name -> workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData
	23, // 5: workloadagentplatform.sharedprotos.databasecenter.UserLabels.labels:type_name -> workloadagentplatform.sharedprotos.databasecenter.UserLabels.LabelsEntry
	24, // 6: workloadagentplatform.sharedprotos.databasecenter.Tags.tags:type_name -> workloadagentplatform.sharedprotos.databasecenter.Tags.TagsEntry
	1,  // 7: workloadagentplatform.sharedprotos.databasecenter.Product.type:type_name -> workloadagentplatform.sharedprotos.databasecenter.ProductType
	0,  // 8: workloadagentplatform.sharedprotos.databasecenter.Product.engine:type_name -> workloadagentplatform.sharedprotos.databasecenter.Engine
	9,  // 9: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.id:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId
	9,  // 10: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.primary_resource_id:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId
	25, // 11: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.creation_time:type_name -> google.protobuf.Timestamp
	25, // 12: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.updation_time:type_name -> google.protobuf.Timestamp
	6,  // 13: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.expected_state:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.State
	6,  // 14: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.current_state:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.State
	2,  // 15: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.instance_type:type_name -> workloadagentplatform.sharedprotos.databasecenter.InstanceType
	14, // 16: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.product:type_name -> workloadagentplatform.sharedprotos.databasecenter.Product
	16, // 17: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.availability_configuration:type_name -> workloadagentplatform.sharedprotos.databasecenter.AvailabilityConfiguration
	17, // 18: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.backup_configuration:type_name -> workloadagentplatform.sharedprotos.databasecenter.BackupConfiguration
	20, // 19: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.backup_run:type_name -> workloadagentplatform.sharedprotos.databasecenter.BackupRun
	12, // 20: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.user_label_set:type_name -> workloadagentplatform.sharedprotos.databasecenter.UserLabels
	10, // 21: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.machine_configuration:type_name -> workloadagentplatform.sharedprotos.databasecenter.MachineConfiguration
	13, // 22: workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceMetadata.tags_set:type_name -> workloadagentplatform.sharedprotos.databasecenter.Tags
	3,  // 23: workloadagentplatform.sharedprotos.databasecenter.AvailabilityConfiguration.availability_type:type_name -> workloadagentplatform.sharedprotos.databasecenter.AvailabilityType
	19, // 24: workloadagentplatform.sharedprotos.databasecenter.BackupConfiguration.backup_retention_settings:type_name -> workloadagentplatform.sharedprotos.databasecenter.RetentionSettings
	26, // 25: workloadagentplatform.sharedprotos.databasecenter.RetentionSettings.quantity_based_retention:type_name -> google.protobuf.Int32Value
	27, // 26: workloadagentplatform.sharedprotos.databasecenter.RetentionSettings.duration_based_retention:type_name -> google.protobuf.Duration
	25, // 27: workloadagentplatform.sharedprotos.databasecenter.RetentionSettings.timestamp_based_retention_time:type_name -> google.protobuf.Timestamp
	25, // 28: workloadagentplatform.sharedprotos.databasecenter.BackupRun.start_time:type_name -> google.protobuf.Timestamp
	25, // 29: workloadagentplatform.sharedprotos.databasecenter.BackupRun.end_time:type_name -> google.protobuf.Timestamp
	7,  // 30: workloadagentplatform.sharedprotos.databasecenter.BackupRun.status:type_name -> workloadagentplatform.sharedprotos.databasecenter.BackupRun.Status
	9,  // 31: workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData.resource_id:type_name -> workloadagentplatform.sharedprotos.databasecenter.DatabaseResourceId
	25, // 32: workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData.last_refresh_time:type_name -> google.protobuf.Timestamp
	8,  // 33: workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData.signal_type:type_name -> workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData.SignalType
	22, // 34: workloadagentplatform.sharedprotos.databasecenter.ConfigBasedSignalData.outdated_minor_version_signal_data:type_name -> workloadagentplatform.sharedprotos.databasecenter.OutdatedMinorVersionSignalData
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sharedprotos_databasecenter_databasecenter_proto_init() }
func file_sharedprotos_databasecenter_databasecenter_proto_init() {
	if File_sharedprotos_databasecenter_databasecenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseResourceFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCBDRConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetentionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigBasedSignalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutdatedMinorVersionSignalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DatabaseResourceFeed_ResourceMetadata)(nil),
		(*DatabaseResourceFeed_ConfigBasedSignalData)(nil),
	}
	file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RetentionSettings_QuantityBasedRetention)(nil),
		(*RetentionSettings_DurationBasedRetention)(nil),
		(*RetentionSettings_TimestampBasedRetentionTime)(nil),
	}
	file_sharedprotos_databasecenter_databasecenter_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ConfigBasedSignalData_SignalBoolValue)(nil),
		(*ConfigBasedSignalData_OutdatedMinorVersionSignalData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sharedprotos_databasecenter_databasecenter_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sharedprotos_databasecenter_databasecenter_proto_goTypes,
		DependencyIndexes: file_sharedprotos_databasecenter_databasecenter_proto_depIdxs,
		EnumInfos:         file_sharedprotos_databasecenter_databasecenter_proto_enumTypes,
		MessageInfos:      file_sharedprotos_databasecenter_databasecenter_proto_msgTypes,
	}.Build()
	File_sharedprotos_databasecenter_databasecenter_proto = out.File
	file_sharedprotos_databasecenter_databasecenter_proto_rawDesc = nil
	file_sharedprotos_databasecenter_databasecenter_proto_goTypes = nil
	file_sharedprotos_databasecenter_databasecenter_proto_depIdxs = nil
}
